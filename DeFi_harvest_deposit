# encoding: utf-8
# date : 2022/03/21
# BSC 풀 상태 확인하기
#
# pip install web3
#
# 보다 자세한 내용을 아래 tistory 참고
# https://money-expert.tistory.com/49
# https://money-expert.tistory.com/50
# https://money-expert.tistory.com/54
#

from web3 import Web3, HTTPProvider, IPCProvider
from pycoingecko import CoinGeckoAPI
import time
import os
from urllib.request import urlopen, Request
import json

# 수정할 부분
my_addr = 'my eth address'
my_priv = "my_addr's priavate key"

POOL_NAME = 'pancake-masterchef'
MIN_HARVEST_NUM = 2.3  # harvest할 최소 수량
DEPOSIT_POOL = 'syrup-alice'  # harvest한 cake을 저장할 pool

# 수정할 부분 끝

def fetch_abi(contract):
    if not os.path.exists('contracts'):
        os.mkdir('./contracts')

    filename = 'contracts/'+contract+'.json'
    if os.path.exists(filename):
        with open(filename, 'r') as abi_file:
            abi = abi_file.read()
    else:
        # TODO: Error handling
        url = 'https://api.bscscan.com/api?module=contract&action=getabi&address=' + contract
        abi_response = urlopen(Request(url, headers={'User-Agent': 'Mozilla'})).read().decode('utf8')
        abi = json.loads(abi_response)['result']

        with open(filename, 'w') as abi_file:
            abi_file.write(abi)

    return json.loads(abi)


# 가격 : bnb, busd sc에서 cake lp주소로 balance한 후 busd/bnb로 나누면 bnb 가격
sc_addr = {
    'bnb-busd' : '0x1B96B92314C44b159149f7E0303511fB2Fc4774f',
    'cake-bnb' : '0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6',
    'ust-nflx' : '0xF609ade3846981825776068a8eD7746470029D1f',
    'syrup-alice' : '0x4C32048628D0d32d4D6c52662FB4A92747782B56',
}

sc_tokens = {
    'bnb' : '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
    'busd' : '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',
    'cake' : '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',
    'nflx' : '0xa04F060077D90Fe2647B61e4dA4aD1F97d6649dc',
    'ust' : '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',
    'usdt' : '0x55d398326f99059fF775485246999027B3197955',
    'alice' : '0xac51066d7bec65dc4589368da368b212745d63e8',
}

w3 = Web3(Web3.HTTPProvider('https://bsc-dataseed.binance.org/'))

print(w3.isConnected())

# 예제로 pancakeswap 메인 풀
# 아래 주소는 MasterChef 주소로 하위에 있는 채굴 풀에 대한 모든 정보를 얻을 수 있음
# 각 풀별로 별도의 smart contract가 있음. 여기에서 pair에 대한 주소 정보를 얻을 수 있음 
# ex
# MasterChef : 0x73feaa1eE314F8c655E354234017bE2193C9E24E
#  |
#  +-- Cake-BNB LP : 0xA527a61703D82139F8a06Bc30097cC9CAA2df5A6
#    |
#    + Cake : 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82
#    + Bnb : 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c

# get abi info
def fetch_abi(contract):
    if not os.path.exists('contracts'):
        os.mkdir('./contracts')

    filename = "contracts/%s.json"%contract
    if os.path.exists(filename):
        with open(filename, 'r') as abi_file:
            abi = abi_file.read()
    else:
        # TODO: Error handling
        url = 'https://api.bscscan.com/api?module=contract&action=getabi&address=' + contract
        abi_response = urlopen(Request(url, headers={'User-Agent': 'Mozilla'})).read().decode('utf8')
        abi = json.loads(abi_response)['result']

        with open(filename, 'w') as abi_file:
            abi_file.write(abi)

    return json.loads(abi)

pools = { 
        'pancake-masterchef' : '0x73feaa1eE314F8c655E354234017bE2193C9E24E',
}

# 일반적인 풀의 abi. 만약 함수명이 틀린 풀이 있으면 해당 풀의 abi로 대체
contract_common_abi = '[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount0In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1In","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount0Out","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1Out","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint112","name":"reserve0","type":"uint112"},{"indexed":false,"internalType":"uint112","name":"reserve1","type":"uint112"}],"name":"Sync","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":true,"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MINIMUM_LIQUIDITY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"PERMIT_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"burn","outputs":[{"internalType":"uint256","name":"amount0","type":"uint256"},{"internalType":"uint256","name":"amount1","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"factory","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"_reserve0","type":"uint112"},{"internalType":"uint112","name":"_reserve1","type":"uint112"},{"internalType":"uint32","name":"_blockTimestampLast","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"_token0","type":"address"},{"internalType":"address","name":"_token1","type":"address"}],"name":"initialize","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"kLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"mint","outputs":[{"internalType":"uint256","name":"liquidity","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"price0CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"price1CumulativeLast","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"skim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"amount0Out","type":"uint256"},{"internalType":"uint256","name":"amount1Out","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"swap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"sync","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]'    

# masterchef에 있는 pool에서 harvest
def harvest_token_master(contract, i):
    tx = contract.functions.withdraw(i, 0).buildTransaction({
                'gas': 150000,
                'gasPrice': w3.toWei('10', 'gwei'),
                'nonce':  w3.eth.getTransactionCount(my_addr),
            })
    signed_tx = w3.eth.account.signTransaction(tx, private_key=my_priv)
    ret = w3.eth.sendRawTransaction(signed_tx.rawTransaction)

# wallet에 있는 token 잔고
def get_num_token(token_name, wallet_addr) : 
    token_addr = sc_tokens[token_name]
    abi = fetch_abi(token_addr)

    cont_addr = w3.eth.contract(token_addr, abi=abi)

    return cont_addr.functions.balanceOf(wallet_addr).call() 

# syrup에 있는 pool에 deposit
def deposit_token(num_token, to_pool):
    addr = sc_addr[to_pool]
    abi = fetch_abi(addr)
    contract = w3.eth.contract(address=addr, abi=abi)
    
    tx = contract.functions.deposit(num_token).buildTransaction({
                'gas': 150000,
                'gasPrice': w3.toWei('10', 'gwei'),
                'nonce':  w3.eth.getTransactionCount(my_addr),
            })
    signed_tx = w3.eth.account.signTransaction(tx, private_key=my_priv)
    ret = w3.eth.sendRawTransaction(signed_tx.rawTransaction)

# name pool에서 min_harvest_num 이상 채굴된 풀에 대하여 claim
def claim_rewards(name, min_harvest_num):
    addr = pools[name]
    abi = fetch_abi(addr)
    master = w3.eth.contract(addr, abi=abi)

    # get # of pools
    poolLength = master.functions.poolLength().call()
    print('# of pools :', poolLength)
    print('-------------------------------------------')
    print("           pair           earned")
    print('-------------------------------------------')

    total_claimed_token = 0
    for i in range(1, poolLength) :
        amount = 0
        debt = 0
        user_info = master.functions.userInfo(i, my_addr).call()
        amount = user_info[0]
        if amount > 0 :  # for only staked pools
            pool_addr =''

            # get lp pair info
            poolInfo = master.functions.poolInfo(i).call()
            pool_addr = poolInfo[0]

            # get pending cakes
            pending_cakes_real = 0
            deposit = 0
            claimed = ''
            pending_cakes = master.functions.pendingCake(i, my_addr).call() 

            pending_cakes_real = pending_cakes/(10 ** 18 )
            if pending_cakes_real > min_harvest_num :  # 최소 min_harvest_num 이상 채굴된 pool에 한하여 claim
                harvest_token_master(master, i)
                total_claimed_token += pending_cakes_real
                claimed = '*'
            # token info in lp
            addr1 = pool_addr
            abi1 = fetch_abi(addr1)
            e1 = w3.eth.contract(addr1, abi=abi1)
#            print('pool :',  addr1)
    
            # token 1
            sym1 = ''
            sym2 = ''
            token1 = e1.functions.token0().call()
            if token1 != None :
                token1 = w3.toChecksumAddress(token1)
                abi1 = fetch_abi(token1)
                t1 = w3.eth.contract(token1, abi=abi1)
                name1 = t1.functions.name().call()
                sym1 = t1.functions.symbol().call()

                # token 2
                token2 = e1.functions.token1().call()
                token2 = w3.toChecksumAddress(token2)
                # abi 값을 받아서 처리하였으나, berry의 경우에 문제가 있어서 common으로 대체
#                abi2 = fetch_abi(token2)
#                t2 = w3.eth.contract(token2, abi=abi2)
                t2 = w3.eth.contract(token2, abi=contract_common_abi)

                name2 = t2.functions.name().call()
                sym2 = t2.functions.symbol().call()

            master_coins = ['UST', 'BNB', 'ETH', 'BUSD']
            if sym1 in  master_coins : # sm1이 master_coins의 경우에는 순서를 바꿔서 출력
                tmp = sym1
                sym1 = sym2
                sym2 = tmp
            print("%2d [%6s - %6s] %10.3f %s"%(i, sym1, sym2, pending_cakes_real, claimed))
            
    return total_claimed_token

while True:
    try:
        print('===', POOL_NAME, '===')
        total_claimed_token = claim_rewards(POOL_NAME, MIN_HARVEST_NUM) 
        if total_claimed_token > 0 :
            num_token = get_num_token('cake', my_addr) # wallet에 있는 토큰 수
            print('\n deposit cake :', num_token / (10 ** 18 )  )
            deposit_token(num_token-1, DEPOSIT_POOL) # token name, contract name to deposit
        break
    except Exception as e:
        print(e)
        pass
